name: Cloudflare IP 优选抓取 + 华为云DNS更新

on:
  schedule:
    - cron: '0 */2 * * *'  # 每两小时
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  cloudflare_dns_update:
    runs-on: ubuntu-latest
    env:
      OUTPUT_FILE: cloudflare_bestip_ranking.json
      DOMAIN_NAME: "cf.example.com"       # 你的域名
      HW_AK: ${{ secrets.HW_AK }}
      HW_SK: ${{ secrets.HW_SK }}
      HW_PROJECT_ID: ${{ secrets.HW_PROJECT_ID }}
      HW_ZONE_ID: ${{ secrets.HW_ZONE_ID }}
      RECORDSET_CT: ${{ secrets.RECORDSET_CT }}
      RECORDSET_CU: ${{ secrets.RECORDSET_CU }}
      RECORDSET_CM: ${{ secrets.RECORDSET_CM }}
      
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 安装依赖
        run: npm install axios cheerio

      - name: 抓取 Cloudflare IP 并生成 JSON
        run: |
          node -e '
            const axios = require("axios");
            const cheerio = require("cheerio");
            const fs = require("fs");
            const TARGET_URL = "https://api.uouin.com/cloudflare.html";
            const OUTPUT_FILE = process.env.OUTPUT_FILE;

            async function fetchAndParse() {
                try {
                    const res = await axios.get(TARGET_URL, { timeout: 15000, headers: { "User-Agent": "GitHubActionsBot/1.0" } });
                    const $ = cheerio.load(res.data);
                    const $table = $("table.table.table-striped");
                    if ($table.length === 0) throw new Error("未找到目标表格");

                    const headers = ["#", "线路", "优选IP", "丢包", "延迟", "速度", "带宽", "Colo", "时间"];
                    const fullData = {};
                    const ipMetrics = [];

                    $table.find("tr").slice(1).each((i, row) => {
                        const $tds = $(row).find("th, td");
                        const rowData = {};
                        const rowMetrics = {};
                        $tds.each((j, td) => {
                            const h = headers[j];
                            let v = $(td).text().trim();
                            if (h && h !== "Colo") rowData[h] = v;
                            if (h === "延迟") { const n = parseFloat(v.replace("ms","")); if(!isNaN(n)) rowMetrics.latency=n; }
                            if (h === "速度") { const n = parseFloat(v.replace("mb/s","")); if(!isNaN(n)) rowMetrics.speed=n; }
                        });
                        delete rowData["#"];
                        const line = rowData["线路"];
                        if (!fullData[line]) fullData[line]=[];
                        fullData[line].push({ ...rowData, ...rowMetrics });
                        if (rowData["丢包"]==="0.00%") ipMetrics.push({ ...rowData, ...rowMetrics });
                    });

                    ipMetrics.sort((a,b)=>a.latency!==b.latency?a.latency-b.latency:b.speed-a.speed);
                    const bestRow = ipMetrics[0] || {};
                    const bestIp = {
                        "最优线路": bestRow["线路"]||"",
                        "最优IP": bestRow["优选IP"]||"",
                        "最低延迟": bestRow["延迟"]||"",
                        "最高速度": bestRow["速度"]||"",
                        "带宽": bestRow["带宽"]||"",
                        "测试时间": bestRow["时间"]||""
                    };

                    for (const line in fullData) {
                        fullData[line].sort((a,b)=>a.latency!==b.latency?a.latency-b.latency:b.speed-a.speed);
                        fullData[line].forEach(it=>{delete it.latency; delete it.speed;});
                    }

                    const output = { "生成时间": new Date().toISOString(), "最优IP推荐": bestIp, "完整数据列表": fullData };
                    fs.writeFileSync(OUTPUT_FILE, JSON.stringify(output,null,4),"utf8");
                    console.log("Cloudflare IP JSON 已生成:", OUTPUT_FILE);
                } catch(err){console.error(err.message);}
            }

            fetchAndParse();
          '

      - name: 更新华为云 DNS 三网线路
        run: |
          node -e '
            const fs = require("fs");
            const axios = require("axios");
            const data = JSON.parse(fs.readFileSync(process.env.OUTPUT_FILE,"utf8"));
            const DOMAIN_NAME = process.env.DOMAIN_NAME;
            const RECORDSET_CT = process.env.RECORDSET_CT;
            const RECORDSET_CU = process.env.RECORDSET_CU;
            const RECORDSET_CM = process.env.RECORDSET_CM;

            const bestIPs = {
                CT: data["完整数据列表"]["电信"]?.[0]?.["优选IP"] || null,
                CU: data["完整数据列表"]["联通"]?.[0]?.["优选IP"] || null,
                CM: data["完整数据列表"]["移动"]?.[0]?.["优选IP"] || null
            };

            console.log("三网最优IP:", bestIPs);

            async function updateDNS(line, ip, recordsetId){
                if(!ip){console.log(line,"无可用IP，跳过"); return;}
                try{
                    const url = `https://dns.myhuaweicloud.com/v2/zones/${process.env.HW_ZONE_ID}/recordsets/${recordsetId}`;
                    const body = { name: DOMAIN_NAME, type: "A", ttl: 300, records: [ip] };
                    const res = await axios.put(url, body, {
                        headers: {
                            "Content-Type": "application/json",
                            "X-Auth-Token": process.env.HW_AK
                        }
                    });
                    console.log(`${line} 更新成功: ${ip}`);
                }catch(e){console.error(`${line} 更新失败:`, e.message);}
            }

            (async()=>{
                for(const line of ["CT","CU","CM"]){
                    await updateDNS(line,bestIPs[line],line==="CT"?RECORDSET_CT:line==="CU"?RECORDSET_CU:RECORDSET_CM);
                }
            })();
          '

      - name: 上传 JSON 作为制品
        uses: actions/upload-artifact@v4
        with:
          name: cloudflare-ip-data
          path: ${{ env.OUTPUT_FILE }}
          retention-days: 7
